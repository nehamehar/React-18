/*  these all are hooks usestate usecallback useref 


1. useState Hook

usestate(first value, f)
usestate(state , setvalue)

--usestate use to add the state to functional that show on browser
--Set an initial state value.
---Update the state value when needed.
----useState is for adding state to functional components.
---It allows you to create state variables, update them, and 
trigger re-renders when the state changes. This makes it an essential hook for building interactive and dynamic React applications.
--- set can shows the updated number on browser
Eg:
const [state, setState] = useState(initialValue);
--State is initial value 
---setState is use to update the state value
----initial Value will give update value



***
Resetting State
You can also reset the state by calling the setState function with the initial value again:

javascript
Copy
setCount(0); // Resets count to 0


******
FOR MULTIPLE STATE:
setCount((prevCount) => prevCount + 1)  CALLBACK FUN
setCount((prevCount) => prevCount + 1) 
-- it will update the number with total set of lines if 2 the first value is 2 then 4 then 6
- if you want to update the value with multiple times

FOR ONE :
setCount(COUNT + 1)  



----------------------------------------
2. useEffect Hook
---The useEffect hook in React is used to perform side effects in functional
like-
Fetching data from an API
Subscribing to events (like a WebSocket)
Manually updating the DOM (e.g., changing the title of the page)
Setting up a timer or interval
Cleaning up resources when the component unmounts or before the effect runs again (like clearing a timer)

--useeffect use for sideeffects
--this is how vwevwrite useeefect

useeffect(() => {
  
},[state variable] ) 

--[] - dependency array (we put variable in it which we want to call when the varibale we put inside depenedcies have some changes like last value to current value or rerender (only when it call the varibale when there is some chanes occur))
The dependencies array in useEffect contains variables, usually state or props, that the effect depends on. React will check the values inside the array and re-run the effect only if any of the values change between renders.
- we pass call back fun also an empty array
1. if we want to run only one time empty the []
2. if not if that with variable you want to track with under []



3. useRef hook:
-- useref use as access in Dom element we can make one fun of useref and put 
(ref={varibale name of that fun}) then it will use as access in DOM just like get element (variablename.current.props)
-- it return object as (current:undefine) if we do not pass 
---if we pass anything
like const myRef = useRef("hi")
here hi is current value , current is key hi is value
--it does not rerender or it do not update the value like useSate
-- it remeber the value that we have passed the value 



4. useCallback:
--use useCallback is to prevent a component from re-rendering unless its props have changed
callback(fn,dependencies)

When to Use:

You’d typically use useCallback when you need to pass a function to a child component that is optimized with React.memo or when that function is part of a dependency list for useEffect, useMemo, or other hooks. This ensures that the child doesn't unnecessarily re-render and that the effect only runs when truly needed.

imp
Functions are recreated on every render by default. This means if you pass a function as a prop to a child component, the child component will re-render even if the function's logic hasn’t changed. useCallback ensures that the function is only recreated when its dependencies change, preventing unnecessary re-renders.

5. useMemo
--The useMemo Hook only runs when one of its dependencies update.
--The useMemo and useCallback Hooks are similar. The main difference is that useMemo returns a memoized value and useCallback returns a memoized function.



Math.random -- use to generate the random password 
.length = use to retrieve the length of array string anything in js 

--space from right side 
mr- size

--input in react is

<input 
          type="text"   first text
          value={password}   second what kind like pass or somethinfg
          className='w-full px-3 py-1 outline-none'
          placeholder=""  // can write anything
          readonly // no one can change anything 
          />  

***putting range effect *****
<input type="range" id="volume" name="volume" min="0" max="100" value="50"></input>
type="range": Specifies that this is a range input (a slider).
id="volume": The unique identifier for the input element, useful for linking to a label.
name="volume": The name of the input, typically used when submitting the form data.



*******on
onChange={(e) => {setlength(e.target.value)}}
passing event then event can call setlength property then it will work

******for check box

<input type="checkbox" id="numberinput" class="mr-2" defaultChecked={numbersAllowed} 
            onChange={() => 
            {numbersnotAllowed((prev) => !prev)}}/>
            <label className="text-orange-500">Numbers</label>














//code 
import { useState, useCallback, useEffect, useRef} from 'react'
import './App.css'

function App() {
  const [letters, setletters] = useState(6); //usestate for counting the letters in box
  const [numbersAllowed, setnumbersAllowed] = useState(false); // this for numbers lettersallowed is random case we are taking for letters or numbers true and false 
  const [charAllowed, setcharAllowed] = useState(false); // this is for char
  const [pass, setpass] = useState("") // for input pass


  // useref hook
  const passwordRef = useRef(null)
  
  const generatorPass = useCallback(() => {
    let pass =""
    let data = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz"  //data for pass
    if (numbersAllowed) data += "0123456789"
    if (charAllowed) data += "!@#$%^&*()-_=+|{ };:/?"
    
    // generating random numbers with loop
    for (let i = 1; i <= length; i++)  //i vallue is less than eqaul to array k highest element ,then i++
    { 
      let char = Math.floor(Math.random()*data.length + 1)   // Math.random is use to generate the random pass, data.length + 1=> data k length m +1 hota rhega 0 n ayega
      // //for taking character in index value with upper operation: (charat(name where you want character in index)
      pass += data.charAt(char)
    }
    // for pass value read
    setpass(pass)
  }, [letters, numbersAllowed, charAllowed, setpass]);

  
  const copyPasswordtoclipbpard = useCallback(() => {
    window.navigator.clipboard.writeText(pass)
  },
[pass])
  //useeffect
  useEffect (() => {generatorPass()}, [letters, numbersAllowed, charAllowed,generatorPass]);
  

  
  return ( 
    <div className='px-3 py-5 ml-48 mr-48 text-2xl'> 
      <h1 className="py-3 text-center text-white bg-gray-700 border-2 rounded-full">Generating Passwords</h1>
      <div className='justify-center px-48 border-4 py-36 rounded-3xl mt-28 bg-slate-700'>
        <div className='flex overflow-hidden rounded-lg shad'>
          <input 
          type="text"  //react input
          value={pass}  // call from state 
          className='w-full px-3 py-1 outline-none'
          placeholder='password'
          readOnly
          ref={passwordRef} />
          <button 
          onClick={copyPasswordtoclipbpard}
          className='mr-1 bg-black border-white rounded-md text-violet-50'>COPY</button>
        </div>
        <div className='flex text-lg gap-x-2'>
          <div className='flex items-center gap-x-1'>
            <input
            type='range'
            min={6}
            max={80}
            value={letters} //value will linked with length
            className='cursor-pointer' //as without classname we canot use cursor pointer
            onChange={(e) => {setletters(e.target.value)}}
            ></input>
            <label className='text-orange-500 rounded-full mt-9 mb-7'>Range:{letters}</label>
          </div>
          <div className='flex items-center text-lg text-orange-500 ml-28 gap-x-1'>
            <input type="checkbox" id="numberinput" defaultChecked={numbersAllowed} 
            onChange={() => 
            {setnumbersAllowed((prev) => !prev)}}/>
            <label htmlFor='numbersInput'>Number</label></div>
          <div className='flex items-center text-lg text-orange-500 ml-28 base gap-x-1'>
            <input type="checkbox" id="characterInput" defaultChecked={charAllowed} 
            onChange={() => {
              setcharAllowed((prev) => !prev)}}/>
            <label htmlFor='characterInput'>Character</label></div>
        </div>
      </div>
    </div>
  )
}
export default App
*\

