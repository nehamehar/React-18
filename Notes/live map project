The Geolocation API (navigator.geolocation.watchPosition) is used to get the current location of the person. 

Leaflet Map:

MapContainer from react-leaflet creates the map. We center the map on the current location using the center prop


Pinbar Emoji as Marker:

We use L.divIcon to create a custom Leaflet marker that displays the 📍 pinbar emoji.
You can adjust the iconSize and iconAnchor values to fit the emoji properly on the map.

Popup:

A Popup is displayed with the person's current latitude and longitude whenever the pin (emoji) is clicked.

/*

Key Steps:
Geolocation API: Use the browser’s built-in navigator.geolocation API to get the user's live latitude and longitude.
Google Maps: Use the Google Maps API to display the user's live position on the map.
Real-time Updates: Use the watchPosition method to get continuous updates of the user's location.
Example Code (Frontend Only):
GoogleMapComponent.js (React + Geolocation API + Google Maps)
javascript
Copy
import React, { useState, useEffect } from 'react';
import { GoogleMap, LoadScript, Marker } from '@react-google-maps/api';

const containerStyle = {
  width: '100%',
  height: '100vh',
};

const center = {
  lat: 37.7749, // Default center latitude (San Francisco)
  lng: -122.4194, // Default center longitude (San Francisco)
};

const GoogleMapComponent = () => {
  const [location, setLocation] = useState({
    lat: 37.7749, // Default latitude
    lng: -122.4194, // Default longitude
  });

  // Get the current position using Geolocation API
  useEffect(() => {
    if (navigator.geolocation) {
      const watchId = navigator.geolocation.watchPosition(
        (position) => {
          setLocation({
            lat: position.coords.latitude,
            lng: position.coords.longitude,
          });
        },
        (error) => {
          console.error("Error getting location:", error);
        },
        { enableHighAccuracy: true, maximumAge: 10000, timeout: 5000 }
      );

      // Clean up the watch position when the component is unmounted
      return () => {
        navigator.geolocation.clearWatch(watchId);
      };
    } else {
      console.error("Geolocation is not supported by this browser.");
    }
  }, []);

  // Custom icon for the officer marker (you can use your own icon image URL here)
  const officerIcon = {
    url: 'https://upload.wikimedia.org/wikipedia/commons/thumb/4/4e/Plawecki_map_marker.svg/1200px-Plawecki_map_marker.svg.png', 
    scaledSize: new window.google.maps.Size(30, 30),
    origin: new window.google.maps.Point(0, 0),
    anchor: new window.google.maps.Point(15, 30),
  };

/* return (
    <LoadScript googleMapsApiKey="YOUR_GOOGLE_MAPS_API_KEY">
      <GoogleMap
        mapContainerStyle={containerStyle}
        center={location}
        zoom={14}
      >
        {/* Marker to show the user's live location */}
/*        <Marker
          position={location}
          title="Your Location"
          icon={officerIcon}
        />
      </GoogleMap>
    </LoadScript>
  );
};*/

export default GoogleMapComponent;
Explanation:
Geolocation API:

We use navigator.geolocation.watchPosition() to continuously monitor the user’s location. This method provides the current position and updates the position whenever the user moves.
watchPosition keeps track of the location in real-time, unlike getCurrentPosition(), which only fetches the location once.
The watchPosition method provides updates every time the user moves, and we update the state (setLocation) with the new latitude and longitude.
Google Maps:

The GoogleMap component from the @react-google-maps/api library is used to display the map.
The Marker component is placed on the map to show the user's live location. The position of the marker is updated whenever the location state changes (i.e., when the location updates from watchPosition).
The icon prop of the Marker allows you to use a custom image (icon) for the marker.
Real-time Location Updates:

The useEffect hook initializes the geolocation watcher when the component is mounted and cleans it up when the component is unmounted using clearWatch.
Custom Marker:

The officerIcon variable is a custom icon (can be replaced with any image URL) that you use to represent the officer's position on the map.
Important Notes:
Device Location: This approach relies on the device’s GPS, so it works well for mobile devices (smartphones, tablets) that have GPS hardware. On desktop computers, the browser uses the IP address and Wi-Fi networks to estimate the location, which might not be as accurate.

Permission: The browser will ask the user for permission to access their location. You must handle cases where the user denies access to their location.

Limitations:

This method only tracks the location of a single device (or user). If you need to track multiple officers or users, a backend would be needed to aggregate and broadcast locations.
Without a backend, there's no central storage of the location data, and it's not possible to track the officer’s movement history.
How to Test:
Open your app on a mobile device (or on a desktop with location services enabled).
Allow the browser to access your location.
You should see the marker on the map representing your current location, and the map will update as you move.
Frontend-Only Tracking: When It Works Best
Personal Use: For a single officer or user who is using a mobile device to track their own location on the map.
Temporary Use: If you don't need to store location data or track multiple users in real-time.
If you need to track multiple users or need to store the location data persistently, then a backend server is essential.

Let me know if you need further clarification or any adjustments!





Attach

Search

Reason